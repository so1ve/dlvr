/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
export {}
declare global {
  const ESBUILD_LINK_BANNER: typeof import('./utils/esbuild')['ESBUILD_LINK_BANNER']
  const ESBUILD_VERSION: typeof import('./utils/esbuild')['ESBUILD_VERSION']
  const GITHUB_MATCHER: typeof import('./utils/parse')['GITHUB_MATCHER']
  const NPM_MATCHER: typeof import('./utils/parse')['NPM_MATCHER']
  const SUPPORTED_MINIFY_EXTENSIONS: typeof import('./utils/minify/index')['SUPPORTED_MINIFY_EXTENSIONS']
  const createBanner: typeof import('./utils/banner')['createBanner']
  const createHTMLBanner: typeof import('./utils/banner')['createHTMLBanner']
  const defineMinifier: typeof import('./utils/helpers')['defineMinifier']
  const esbuildMinify: typeof import('./utils/esbuild')['esbuildMinify']
  const fatalError: typeof import('./utils/error')['fatalError']
  const generateGitHubURL: typeof import('./utils/parse')['generateGitHubURL']
  const generateNPMURL: typeof import('./utils/parse')['generateNPMURL']
  const getContentMime: typeof import('./utils/mime')['getContentMime']
  const getExtension: typeof import('./utils/path')['getExtension']
  const getExtraMime: typeof import('./utils/mime')['getExtraMime']
  const getPathOnly: typeof import('./utils/path')['getPathOnly']
  const invalidRequestPath: typeof import('./utils/invalid-request')['invalidRequestPath']
  const isBanned: typeof import('./utils/ban')['isBanned']
  const minify: typeof import('./utils/minify/index')['minify']
  const minifyString: typeof import('./utils/minify/index')['minifyString']
  const parseGithubURL: typeof import('./utils/parse')['parseGithubURL']
  const parseNPMURL: typeof import('./utils/parse')['parseNPMURL']
  const removeHash: typeof import('./utils/path')['removeHash']
  const removeQuery: typeof import('./utils/path')['removeQuery']
  const removeTrailingSlash: typeof import('./utils/path')['removeTrailingSlash']
  const stringToUint8Array: typeof import('./utils/convert')['stringToUint8Array']
  const toArray: typeof import('./utils/index')['toArray']
  const uint8ArrayToString: typeof import('./utils/convert')['uint8ArrayToString']
}
